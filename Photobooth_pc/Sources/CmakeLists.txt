cmake_minimum_required (VERSION 3.15)	

enable_language(CXX)

set (CMAKE_CONFIGURATION_TYPES "Debug;Release")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi")

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(PROJECT_NAME Photobooth)
project(${PROJECT_NAME} LANGUAGES CXX)

#-------------------------------------------------------------------------------------------------------------------
# GET SOURCES
#-------------------------------------------------------------------------------------------------------------------
file(GLOB_RECURSE Photobooth_src LIST_DIRECTORIES false 

		"${Photobooth_SOURCE_DIR}/*.cpp" 
		"${Photobooth_SOURCE_DIR}/*.c"
		"${Photobooth_SOURCE_DIR}/*.h"
		"${Photobooth_SOURCE_DIR}/*.qrc")

add_executable(${PROJECT_NAME} ${Photobooth_src})
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

set_property(TARGET ${PROJECT_NAME} PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

foreach(src IN ITEMS ${Photobooth_src})
    get_filename_component(src_path "${src}" PATH)
    file(RELATIVE_PATH rel_path "${Photobooth_SOURCE_DIR}" "${src_path}")	
    string(REPLACE "/" "\\" group_path "${rel_path}")
    source_group("${group_path}" FILES "${src}")
    target_include_directories(${PROJECT_NAME} PUBLIC "${src_path}/")
endforeach()

#-------------------------------------------------------------------------------------------------------------------
# LINK OPENCV DEPENDENCIES
#-------------------------------------------------------------------------------------------------------------------
find_package( OpenCV REQUIRED)
if (OpenCV_FOUND)
  target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})
else ()
  message(FATAL_ERROR "opencv not found")
endif ()

#-------------------------------------------------------------------------------------------------------------------
# LINK QT DEPENDENCIES
#-------------------------------------------------------------------------------------------------------------------
find_package(Qt5 COMPONENTS Core REQUIRED)
target_link_libraries(${PROJECT_NAME} Qt5::Core)
find_package(Qt5 COMPONENTS Gui REQUIRED)
target_link_libraries(${PROJECT_NAME} Qt5::Gui)
find_package(Qt5 COMPONENTS Widgets REQUIRED)
target_link_libraries(${PROJECT_NAME} Qt5::Widgets)
find_package(Qt5 COMPONENTS Network REQUIRED)
target_link_libraries(${PROJECT_NAME} Qt5::Network)
find_package(Qt5 COMPONENTS Xml REQUIRED)
target_link_libraries(${PROJECT_NAME} Qt5::Xml)
find_package(Qt5 COMPONENTS SerialPort REQUIRED)

#-------------------------------------------------------------------------------------------------------------------
# LINK TENSORFLOW
#-------------------------------------------------------------------------------------------------------------------
set(IX_TENSORFLOW ${Photobooth_SOURCE_DIR}/../Externals/tensorflow CACHE PATH "Tensorflow API location")

target_include_directories(${PROJECT_NAME} PUBLIC "${IX_TENSORFLOW}")
target_link_libraries(${PROJECT_NAME} general "${IX_TENSORFLOW}/tensorflow.lib")

#-------------------------------------------------------------------------------------------------------------------
# PREPROCESSOR 
#-------------------------------------------------------------------------------------------------------------------
add_definitions(-DUNICODE)
add_definitions(-D_X64_MACHINE)
add_definitions(-DNOMINMAX)

#-------------------------------------------------------------------------------------------------------------------
# POST BUILD 
#-------------------------------------------------------------------------------------------------------------------
#OpenCV
get_target_property(opencvDLL opencv_world IMPORTED_LOCATION_RELEASE)
get_filename_component(opencvDLLNoExt ${opencvDLL} NAME_WE)
get_filename_component(opencvDLLDir ${opencvDLL} DIRECTORY)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${opencvDLLDir}/${opencvDLLNoExt}$<$<CONFIG:debug>:d>.dll" $<TARGET_FILE_DIR:${PROJECT_NAME}>)

#Tensorflow
file(TO_NATIVE_PATH $<TARGET_FILE_DIR:${PROJECT_NAME}> PHOTOBOOTH_EXE_FOLDER)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND xcopy /d /y /I "\"${IX_TENSORFLOW}\\*.dll\"" "\"${PHOTOBOOTH_EXE_FOLDER}\"")

#Qt
get_target_property(Qt5_CoreLocation Qt5::Core LOCATION)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${Qt5_CoreLocation}/../windeployqt --"$<IF:$<CONFIG:Debug>,debug,release>" $<TARGET_FILE_DIR:${PROJECT_NAME}>)
